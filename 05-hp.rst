体力类事件
===========

在本节中，我们将了解和体力值有关的事件，同时初步认识触发技。
众所周知体力值具有重要的地位，血条空了就死咯。我们的拓展活动中的大部分技能\
也是围绕着体力值展开的。

本节中讲解的内容对应的代码文件为：lua/server/events/hp.lua。

体力变化事件
------------

规则集中无此事件，但是有相近的“扣减体力事件”。体力变化事件顾名思义，就是修改角色的体力值\
（增加体力或者扣减体力都可）

事件的流程如下：

1. 先确定体力值的变化量，如果变化量为0就结束事件。
2. 触发时机“体力变化时”（\ ``fk.BeforeHpChanged``\ ），有可能在此时机被防止
3. 修改角色的体力值。
4. 触发时机“体力变化后”（\ ``fk.HpChanged``\ ）
5. 若3中修改完体力值之后，若是扣减体力且角色的体力值不大于0，则产生濒死事件。

该事件一般不会手动产生（只有部分技能比如周宣的“寤寐”重设体力值），而是由伤害、失去体力、\
回复体力事件产生的。

产生事件：改变一名角色的体力
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

欲直接产生体力变化事件来修改他人的体力，可以用如下代码——等会，我们还没有弄好练兵场呢！

速速创建新人物，取名随意，然后新建技能如下：

  演练：出牌阶段，你可以演练。

代码如下：

.. code:: lua

  local tester = General(extension, "st__tester", "shu", 4)
  local test = fk.CreateActiveSkill{
    name = "st__test",
    target_filter = function(self, to_select)
      return true
    end,
    on_use = function(self, room, effect)
      local from = room:getPlayerById(effect.from)  -- 这是你，技能的发动者
      local to = room:getPlayerById(effect.tos[1])  -- 这是选择的第一个目标
      -- 接下来就随意发挥吧！想写啥代码都行
    end,
  }
  tester:addSkill(test)
  -- 这是来自谋徐盛的技能，可以在第一轮开始时立刻进入额外回合
  tester:addSkill("test_zhenggong")
  Fk:loadTranslationTable{
    ["st__tester"] = "测试员",
    ["st__test"] = "演练",
    [":st__test"] = "出牌阶段，你可以演练。",
  }

这样一来我们就有个一个练兵场了，可以在on_use里面写下任意代码，然后发动技能就可以看到效果了。

好了，我们言归正传——产生一个体力变化事件来直接修改体力值。为了做到这点，我们使用Room的\
成员函数 ``changeHp`` 。

.. note::

   Room是啥？当然就是游戏房间了呗。你每次点进大厅总能看到许许多多的房间，每个房间内的信息\
   肯定是不相同的，所以当然要用Room区分开每个房间了。

   新月杀使用程序代码实现的三国杀游戏，所以每个房间里面存在着“发牌员”一般的角色——而我们如\
   果想要做那些发牌员做的事情的话，就要用到room提供的各种函数咯。

函数原型如下： （Room相关函数都在 lua/server/room.lua ，想看也可以自己去看）

.. code:: lua

  ---@param player ServerPlayer @ 玩家
  ---@param num integer @ 变化量
  ---@param reason string|nil @ 原因
  ---@param skillName string|nil @ 技能名
  ---@return boolean
  function Room:changeHp(player, num, reason, skillName) end

其中，player是变化体力的那个角色，num是变化量（可以是正数可以是负数），reason用来指明是为何\
改变体力的（伤害？失去体力？回复体力？），这里一律nil，skillName是造成此次事件的相关技能（\
也就是各种技能中那些“以此法”了）。

.. hint::

   像这种 ``---@param`` 的注释是一种特殊的注释，它用三根杠和一个艾特符号开头。
   这种注释是用来帮助vscode理解函数内容的，从而能给我们更好的补全提示。

   ``---@param`` 指明这个形参的参数类型； ``---@return`` 则指明返回值类型。
   后面还有个艾特符号，那个是对于这个类型注解的额外注释，方便源码阅读者看懂用的。

那我们开始操练吧，使用上面的技能“演练”来试试看。我已经写了一行注释了，在那后面另起一行，\
写下改变体力的代码：

.. code:: lua

  on_use = function(self, room, effect)
    local from = room:getPlayerById(effect.from)  -- 这是你，技能的发动者
    local to = room:getPlayerById(effect.tos[1])  -- 这是选择的第一个目标
    -- 接下来就随意发挥吧！想写啥代码都行
    room:changeHp(to, -1, nil, self.name)
  end,

这里就是实际调用了changeHp函数来改变体力值了，玩家是to，技能名是self.name，也就是这个技能的名。
这个函数的效果就是将to的体力值加上-1，达到扣减1点体力的目的。

现在打开游戏，对任何一名角色发动一下“演练”，他就会扣一点体力咯。

触发技
-------

除了会发生事件之外，利用起来事件的触发时机同样是个非常重要的知识点。而这就需要我们去了解触发技了。

下面来介绍触发技。首先介绍触发技的几个基本函数，再说明触发技的执行流程，最后说明怎么创建触发技\
以及进行实操：“节操：锁定技，当你的体力值变化后，你摸一张牌。”

触发技的基本函数
~~~~~~~~~~~~~~~~~

触发技中涉及这些函数：

- ``can_trigger`` ：技能能否被触发？
- ``on_trigger`` ：技能是如何执行的？
- ``on_cost`` ：技能的执行消耗是什么？
- ``on_use`` ：技能正式发动后，执行什么代码？

所有这些函数的函数原型全都是一样的：

.. code:: lua

   ---@param self TriggerSkill
   ---@param event Event
   ---@param target ServerPlayer
   ---@param player ServerPlayer
   ---@param data any
   function(self, event, target, player, data)
   end

这个函数原型还是稍微有些难以理解，得结合触发技的具体执行流程来看。

触发技的执行流程
~~~~~~~~~~~~~~~~

第一步：触发一个时机
++++++++++++++++++++

触发技若是想要被发动，那么肯定就先要有时机被触发了。而用来触发事件的函数就是如下这位：

.. code:: lua

   ---@param event Event
   ---@param target ServerPlayer
   ---@param data any
   function GameLogic:trigger(event, target, data) end

直接调查这个函数的代码就能知道触发技执行的所有细节了。但这个函数并没有那么好懂，故在此进行说明。

首先，从这个函数可以看出，某一个触发时机一共有三要素：

- ``event`` ：具体是哪个触发时机。
- ``target`` ：这个触发时机涉及的玩家，这名玩家在后面会称为“时机的承担者”。
- ``data`` ：可以是任何值，视具体时机而定。

首先，event是这个时机具体是什么，比如“受到伤害后”（ ``fk.Damaged`` ）；target则是时机的承担者，比如“受到伤害后”这个时机，承担者就是此次伤害的目标；data就完完全全是根据时机而定了。

想要知道某个时机具体对应着哪个target和data，最直接的办法就是直接从源码中找到trigger函数调用的点了，这样一下子就知道这个时机的相关数据了。不过呢，文档后面也是会一一列出的，毕竟有些时机的data还是多少复杂了点。

第一步（续）：假设出一个例子情景
++++++++++++++++++++++++++++++++

在开始接下来的解说之前，还是想象一下有这么一桌军五吧：

::

       郭嘉      司马懿

  *关羽 -------杀------>  郭嘉 -1

         周瑜（一号位）

如图所示，关羽杀郭嘉（二号位），郭嘉掉血，此时执行到了伤害流程的“受到伤害后”时机。

假设当前回合的角色是关羽。

假设郭嘉拥有在这个时机可以发动的技能“遗计”，其代码如下：

.. code:: lua

  local easy_yiji = fk.CreateTriggerSkill{
    name = "easy_yiji",
    events = {fk.Damaged},
    on_use = function(self, event, target, player, data)
      player:drawCards(2)
    end,
  }

为了简化说明，这是是一段简化版的遗计代码。其作用是受到伤害后，可以摸两张牌。

前面说到一个触发技得有4种函数，而这里却只有个 ``on_use`` 啊。这是因为其他三个函数此处可以取默认值，所以实际写Lua的时候省略掉了。为了便于说明，现在将这4个函数补全（包括默认情况）：

.. code:: lua

  local easy_yiji = fk.CreateTriggerSkill{
    name = "easy_yiji",
    events = {fk.Damaged},
    can_trigger = function(self, event, target, player, data)
      return target == player and target:hasSkill(self.name)
    end,
    on_trigger = function(self, event, target, player, data)
      return self:doCost(event, target, player, data)
    end,
    on_cost = function(self, event, target, player, data)
      return player.room:askForSkillInvoke(player, self.name)
    end,
    on_use = function(self, event, target, player, data)
      player:drawCards(2)
    end,
  }

这里假设出来的情景是“受到伤害后”时机，写成代码就是

.. code:: lua

   logic:trigger(fk.Damaged, guojia, data)

这里不关心data。第二个参数guojia表示受到伤害后的那个郭嘉。注意场上有两个郭嘉，这是为了后面详细解释而安排的。

第二步：遍历场上玩家
++++++++++++++++++++

现在的时机是fk.Damaged，刚好遗计的时机也是fk.Damaged，所以遗计就能在这个时机发动了。隔壁司马懿也有个反馈能在这个时机发动。所以现在能够在该时机发动的技能有：遗计、反馈。

假设反馈的代码和上文的遗计一模一样，只是技能名不同罢了。

确定了可能可以发动的技能后，Fk就会从当前回合角色开始，对所有角色进行遍历。每一趟遍历的步骤如下：

1. 把当前正在遍历到的玩家称为player。
2. 执行 ``can_trigger(self, event, target, player, data)``
3. 如果第二步的执行返回了true，就执行 ``on_trigger`` 。

事已至此，触发技函数中的参数也基本明朗了：

- ``self`` ：这个技能本身。
- ``event`` ：当前的触发时机。
- ``target`` ：时机的承担者。
- ``player`` ：当前被遍历到的玩家。
- ``data`` ： ``logic:trigger`` 函数中传入的那个额外的data参数。

下面进行针对前面那桌军五，模拟一下这么个遍历流程。

::

  可能可以发动的技能： 遗计，反馈
  当前回合角色：关羽
  当前时机：受到伤害后
  时机的承担者（target）：郭嘉 - 二号位
  当前的data：没人在意data

  对 关羽 进行遍历，令 player 为 关羽
    -> 遗计的can_trigger：失败，target ~= player
    -> 反馈的can_trigger：失败，target ~= player

  对 周瑜 进行遍历，令 player 为 周瑜
    -> 遗计的can_trigger：失败，target ~= player
    -> 反馈的can_trigger：失败，target ~= player

  对 郭嘉二号位 进行遍历，令 player 为 郭嘉二号位
    -> 遗计的can_trigger：通过，target == player and player:hasSkill(self.name)
      -> 遗计的 on_trigger 开始执行
      -> 执行 TriggerSkill:doCost
    -> 反馈的can_trigger：失败，target == player，但是player:hasSkill(反馈)为false，郭嘉不会反馈

  对 司马懿 进行遍历，令 player 为 司马懿
    -> 遗计的can_trigger：失败，target ~= player
    -> 反馈的can_trigger：失败，target ~= player，虽然player拥有技能反馈

  对 郭嘉四号位 进行遍历，令 player 为 郭嘉四号位
    -> 遗计的can_trigger：失败，target ~= player
    -> 反馈的can_trigger：失败，target ~= player

  遍历结束了，本次触发时机也随之结束了。

从上面的实机演练中我们差不多能明白 ``can_trigger`` 和 ``on_trigger`` 的执行流程。

.. note::

  在实际的执行中，其实是先都执行 ``can_trigger`` ，然后将所有通过的技能暂存在表中，玩家可以从这里面选出自己想要先发动的技能，然后再去执行那个技能的 ``on_trigger`` 。

第三步：询问消耗执行，以及正式发动技能
++++++++++++++++++++++++++++++++++++++

而 ``on_cost`` 和 ``on_use`` ，则是在on_trigger中调用doCost函数时候调用的。doCost的内容如下：

.. code:: lua

  -- do cost and skill effect.
  -- DO NOT modify this function
  function TriggerSkill:doCost(event, target, player, data)
    local ret = self:cost(event, target, player, data)
    if ret then
      return player.room:useSkill(player, self, function()
        return self:use(event, target, player, data)
      end)
    end
  end

在这段代码中，首先执行一下cost函数（也就是这里聊的on_use），如果返回true，那么调用useSkill函数正式发动技能。useSkill函数先播放技能发动的特效、增加技能发动次数，再去调用传入的第三个函数（这里就是on_use了）。

这也就是说，on_cost函数掌握的是技能是否确实要发动，用户得在这里做出自己的选择。如果用户作出了肯定的答复，那么on_cost就返回true，这之后技能发动次数的历史记录便加一，然后开始真正执行技能的效果。

创建触发技的办法
~~~~~~~~~~~~~~~~

要创建一个触发技，我们使用 ``fk.CreateTriggerSkill`` 函数。该函数接收一个表作为参数，表中各种键值的含义如下：

- ``name`` ：技能名。这是索引技能的唯一标识，所以别和其他技能重名了。
- ``frequency`` ：技能的发动频率，建议填入特定变量——例如锁定技\ ``Skill.Compulsory``\ 。
- ``anim_type`` ：技能的动画类型。上一篇好像已经聊过了。
- ``mute`` ：技能是否静默。

.. tip::

  不静默的技能在发动时会随机播放音效、根据\ ``anim_type``\ 播放动画、发log。

  而静默的技能不会播放配音、动画、发log，如果你想播放配音，就得自己手动做这些工作。
  有些需要根据情况手动播放相应配音的技能，比如自书、英魂等，就得先设为静默，然后自己去技能发动的环节添加这些跟播放特效有关的代码。

上面这4项其实是对所有技能都通用的。下面是一些触发技专用的：

- ``global`` ：是否是全局技能。全局技能必定会参与到遍历中。
- ``events`` ：一个数组，保存着可能可以触发这个技能的所有时机。
- ``can_trigger`` ：触发该技能的条件。
- ``on_trigger`` ：技能触发的内容。这个函数一般是自定义如何去询问发动、发动几次的。总之自定义的话，记得在里面调用doCost进行实际的询问和生效就行了。
- ``on_cost`` ：技能生效前要对玩家进行询问的内容，或者说是“消耗”。
- ``on_use`` ：技能生效环节。

.. danger::

  除非万不得已，不要把技能的global设为true！global技能在任何情况下都会被纳入游戏的处理范围，随着global的增多，遍历的技能也会变多，这会使游戏的性能下降！

有些时候我们不希望增加技能发动的次数，只想执行一些代码而已，比如说清理掉某些不可见标记等等。为了实现这个效果，触发技中还有一种称为“refresh”的行为（相对于发动技能的“use”），创建触发技的时候可以用这些来指定：

- ``refresh_events`` ：可能触发refresh的所有时机。
- ``can_refresh`` ：类似 ``can_trigger`` ，只不过是针对refresh的。注意这个函数没有默认值。
- ``on_refresh`` ：类似 ``on_trigger`` ，但是是针对refresh。

refresh和实际发动技能也差不多，一样的遍历，判断can_refresh，执行on_refresh。在实际trigger中，是 **先执行refresh，再执行use** 。

认识我们要写的技能
~~~~~~~~~~~~~~~~~~~~~~~~~~

现在是时候开始实践了。让我们看向这样一个技能：

  节操：\ **锁定技**\ ，当你的体力值变化后，你摸一张牌。

.. note::

  在三国杀官方的实例中，诸如\ **锁定技**\ 、\ **限定技**\ 这类常出现在技能开头的词被称为“技能的标签”。一般会标粗显示，当然，并不是强制要求。

\ **锁定技**\ 好理解；而体力值变化则涉及到刚才讲述的体力变化事件；摸一张牌则是这个技能的效果。
在此，我们看一下体力变化事件触发时会传递什么信息（也就是\ ``data``\ 是什么）

.. code-block:: lua
  :linenos:
  :lineno-start: 35
  :emphasize-lines: 9-15, 17

  local player, num, reason, skillName, damageStruct = table.unpack(self.data)
  local room = self.room
  local logic = room.logic
  if num == 0 then
    return false
  end
  assert(reason == nil or table.contains({ "loseHp", "damage", "recover" }, reason))

  ---@type HpChangedData
  local data = {
    num = num,
    reason = reason,
    skillName = skillName,
    damageEvent = damageStruct,
  }
  -- ...
  logic:trigger(fk.HpChanged, player, data)

可以看出，当体力变化事件被触发时，传入\ ``target``\ 的值为变动体力的人（\ ``player``\ ），而传入data的值则是由其他参数决定的一个表——\ **HpChangedData**\ 。

.. note::
  等等，lua不是只有表吗？这个HpChangedData是什么？
  其实这个是EmmyLua新增的功能——或者说高亮。

  .. seealso::

    想了解EmmyLua可以去EmmyLua的\ `官方文档 <https://emmylua.github.io/index.html>`_\ 。这里只讲述新月杀涉及EmmyLua的部分。

  通过溯源操作（Ctrl+左键）可以在\ ``system_enum.lua``\ 里找到它的定义：

  .. code:: lua

    --- 描述和一次体力变化有关的数据
    ---@class HpChangedData
    ---@field public num integer @ 体力变化量，可能是正数或者负数
    ---@field public reason string @ 体力变化原因
    ---@field public skillName string @ 引起体力变化的技能名
    ---@field public damageEvent DamageStruct|nil @ 引起这次体力变化的伤害数据
    ---@field public preventDying bool @ 是否阻止本次体力变更流程引发濒死流程
  
  这便是EmmyLua在新月杀里最主要的体现之一：创建枚举类。
  这段代码定义了一个名为\ **HpChangedData**\ 的类，其中有\ ``num``\ 、\ ``reason``\ 、\ ``skillName``\ 、\ ``damageEvent``\ 和\ ``preventDying``\ 这五个参数。
  如果相关的值不是特定类型（如\ ``reason``\ 的值是一个数），哪怕理论甚至实际执行上没啥问题，EmmyLua也会因此报错。
  
没什么好说的，参考〖集智〗，给测试员写一个吧：

.. code-block:: lua
  :linenos:

  local st__jiecao = fk.CreateTriggerSkill{
    name = "st__jiecao",
    anim_type = "drawcard",
    frequency = Skill.Compulsory,
    events = {fk.HpChanged},
    can_trigger = function(self, event, target, player, data)
      return target == player and player:hasSkill(self.name)
    end,
    on_use = function(self, event, target, player, data)
      player:drawCards(1, self.name)
    end,
  }
  tester:addSkill(st__jiecao)
  Fk:loadTranslationTable{
    ["st__jiecao"] = "节操",
    [":st__jiecao"] = "锁定技，当你的体力值变化后，你摸一张牌。",
  }

比起前面的\ `〖克己〗 <03-so.html#id2>`_\ 算简单了，但这里还是有一些地方说明一下比较好：

.. code:: lua

  can_trigger = function(self, event, target, player, data)
    return target == player and player:hasSkill(self.name)
  end,

实际上来说，因为在很多时机里，data其实是可选项，不排除data == nil的情况，所以这里其实要加上\ ``and data``\ 判断data是否为nil，这里是确认data不可能为nil后才删去的。
所以这里的代码仅仅只是判断体力变化的是不是你以及你有没有这技能而已。

.. warning::

  在不确认data是否有为nil的可能性时，强烈建议先用\ ``and data``\ 判断data是否为nil（或者\ ``and data ~= nil``\ ）

.. tip::

  严谨的同学可能会发现这里没考虑\ ``data.num == 0``\ ，也就是“体力变化值为0”的情况，不过前面\ ``hp.lua``\ 的代码已经提前排除了这个情况(因为如果num == 0的话这个事件会直接终止)。

接下来就是保存并测试了……

失去体力事件
--------------

事件流程：

1. 确定失去体力的数值，不大于0的话结束事件
2. 触发时机“失去体力前”（\ ``fk.PreHpLost``\ ），有可能防止
3. 构造一个{体力变化事件}来完成体力值的变化
4. 触发时机“失去体力后”（\ ``fk.HpLost``\ ）

如何构造事件：

.. code:: lua

  --- 令一名玩家失去体力。
  ---@param player ServerPlayer @ 玩家
  ---@param num integer @ 失去的数量
  ---@param skillName string|nil @ 技能名
  ---@return boolean
  function Room:loseHp(player, num, skillName) end

事件的触发时机对应的承担者为失去体力的玩家，对应的data为\ ``HpLostData``\ 类型：

.. code:: lua

  --- 描述跟失去体力有关的数据
  ---@class HpLostData
  ---@field public num integer @ 失去体力的数值
  ---@field public skillName string @ 导致这次失去的技能名

回复体力事件
--------------

类似失去体力事件。

事件流程：

1. 确定要回复体力的数值，不大于0的话结束事件
2. 触发时机“回复体力前”（\ ``fk.PreHpRecover``\ ），有可能防止
3. 构造一个{体力变化事件}来完成体力值的变化
4. 触发时机“回复体力后”（\ ``fk.HpRecover``\ ）

如何构造事件：

.. code:: lua

  ---@param recoverStruct RecoverStruct
  ---@return boolean
  function Room:recover(recoverStruct) end

可以看到recover方法接受的参数类型是RecoverStruct。\
RecoverStruct同时也是触发时机对应的data，内容如下：

.. code:: lua

  --- 用来描述和回复体力有关的数据。
  ---@class RecoverStruct
  ---@field public who ServerPlayer @ 回复体力的角色
  ---@field public num integer @ 回复值
  ---@field public recoverBy ServerPlayer|nil @ 此次回复的回复来源
  ---@field public skillName string|nil @ 因何种技能而回复
  ---@field public card Card|nil @ 造成此次回复的卡牌

（结合一个含if语句的实例说明player.hp之类的属性获取方式）

伤害事件
---------

这个事件比较复杂。流程如下：

1. 先确定伤害值，不大于0的话就结束
2. 触发时机“伤害开始前”（\ ``fk.PreDamage``\ ），有可能终止
3. 触发时机“造成伤害时”（\ ``fk.DamageCaused``\ ），有可能终止
4. 触发时机“受到伤害时”（\ ``fk.DamageInflicted``\ ），有可能终止
5. 若是属性伤害且不是因为铁索传导造成的伤害，则认定受伤者是本次传导的起点；\
   只要是属性伤害且受伤者处于横置状态，就重置受伤者
5. 至此决定了伤害值，先扣减护甲，若护甲不足则构造{体力变化事件}修改体力值
6. 触发时机“造成伤害后”（\ ``fk.Damage``\ ）
7. 触发时机“受到伤害后”（\ ``fk.Damaged``\ ）

事件完全结束后依然有一部分流程：

1. 触发时机“伤害结算完毕后”（\ ``fk.DamageFinished``\ ）
2. 若这是属性伤害且受伤者是传导的起点，则从当前回合角色开始对所有横置着的\
   角色各进行一次属性伤害流程，该流程被标记为“因传导导致的伤害”

如何构造事件：

.. code:: lua

  ---@param damageStruct DamageStruct
  ---@return boolean
  function Room:damage(damageStruct) end

可以看到damage方法接受的参数类型是DamageStruct。\
DamageStruct同时也是所有伤害相关触发时机对应的data，内容如下：

.. code:: lua

  --- DamageStruct 用来描述和伤害事件有关的数据。
  ---@class DamageStruct
  ---@field public from ServerPlayer|null @ 伤害来源
  ---@field public to ServerPlayer @ 伤害目标
  ---@field public damage integer @ 伤害值
  ---@field public card Card | nil @ 造成伤害的牌
  ---@field public chain bool @ 伤害是否是铁索传导的伤害
  ---@field public damageType DamageType | nil @ 伤害的属性
  ---@field public skillName string | nil @ 造成本次伤害的技能名
  ---@field public beginnerOfTheDamage boolean | nil @ 是否是本次铁索传导的起点

（一个涉及askFor式交互的卖血技能实例）
